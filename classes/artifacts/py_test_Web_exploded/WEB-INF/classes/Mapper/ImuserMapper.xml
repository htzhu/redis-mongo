<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.py.test.dao.ImuserMapper" >
  <resultMap id="BaseResultMap" type="com.py.test.entity.Imuser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="sex" property="sex" jdbcType="BIT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="domain" property="domain" jdbcType="VARCHAR" />
    <result column="nick" property="nick" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="salt" property="salt" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="avatar" property="avatar" jdbcType="VARCHAR" />
    <result column="departId" property="departid" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="TINYINT" />
    <result column="created" property="created" jdbcType="INTEGER" />
    <result column="updated" property="updated" jdbcType="INTEGER" />
    <result column="push_shield_status" property="pushShieldStatus" jdbcType="BIT" />
    <result column="sign_info" property="signInfo" jdbcType="VARCHAR" />
    <result column="jobId" property="jobId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, sex, name, domain, nick, password, salt, phone, email, avatar, departId, status, 
    created, updated, push_shield_status, sign_info
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from imuser
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from imuser
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.py.test.entity.Imuser" useGeneratedKeys="true" keyProperty="id">
    insert into imuser ( sex, name, domain,
      nick, password, salt, 
      phone, email, avatar, 
      departId, status, created, 
      updated, push_shield_status, sign_info
      )
    values (#{sex,jdbcType=BIT}, #{name,jdbcType=VARCHAR}, #{domain,jdbcType=VARCHAR},
      #{nick,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{salt,jdbcType=VARCHAR}, 
      #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, #{avatar,jdbcType=VARCHAR}, 
      #{departid,jdbcType=INTEGER}, #{status,jdbcType=TINYINT}, #{created,jdbcType=INTEGER}, 
      #{updated,jdbcType=INTEGER}, #{pushShieldStatus,jdbcType=BIT}, #{signInfo,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.py.test.entity.Imuser" useGeneratedKeys="true" keyProperty="id">
    insert into imuser
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="sex != null" >
        sex,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="domain != null" >
        domain,
      </if>
      <if test="nick != null" >
        nick,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="salt != null" >
        salt,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="avatar != null" >
        avatar,
      </if>
      <if test="departid != null" >
        departId,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="created != null" >
        created,
      </if>
      <if test="updated != null" >
        updated,
      </if>
      <if test="pushShieldStatus != null" >
        push_shield_status,
      </if>
      <if test="signInfo != null" >
        sign_info,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >

      <if test="sex != null" >
        #{sex,jdbcType=BIT},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="domain != null" >
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="nick != null" >
        #{nick,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null" >
        #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="departid != null" >
        #{departid,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
      <if test="created != null" >
        #{created,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        #{updated,jdbcType=INTEGER},
      </if>
      <if test="pushShieldStatus != null" >
        #{pushShieldStatus,jdbcType=BIT},
      </if>
      <if test="signInfo != null" >
        #{signInfo,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.py.test.entity.Imuser" >
    update imuser
    <set >
      <if test="sex != null" >
        sex = #{sex,jdbcType=BIT},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="domain != null" >
        domain = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="nick != null" >
        nick = #{nick,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="avatar != null" >
        avatar = #{avatar,jdbcType=VARCHAR},
      </if>
      <if test="departid != null" >
        departId = #{departid,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="created != null" >
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="updated != null" >
        updated = #{updated,jdbcType=INTEGER},
      </if>
      <if test="pushShieldStatus != null" >
        push_shield_status = #{pushShieldStatus,jdbcType=BIT},
      </if>
      <if test="signInfo != null" >
        sign_info = #{signInfo,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.py.test.entity.Imuser" >
    update imuser
    set sex = #{sex,jdbcType=BIT},
      name = #{name,jdbcType=VARCHAR},
      domain = #{domain,jdbcType=VARCHAR},
      nick = #{nick,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      avatar = #{avatar,jdbcType=VARCHAR},
      departId = #{departid,jdbcType=INTEGER},
      status = #{status,jdbcType=TINYINT},
      created = #{created,jdbcType=INTEGER},
      updated = #{updated,jdbcType=INTEGER},
      push_shield_status = #{pushShieldStatus,jdbcType=BIT},
      sign_info = #{signInfo,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>